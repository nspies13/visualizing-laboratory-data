---
title: "Best Practices in Data Visualization"
---

# Introduction

## TODO

# Getting Started

### Download the Data

```{r}
# Install required packages if not already installed
if (!requireNamespace("arrow", quietly = TRUE)) {
  install.packages("arrow")
}
if (!requireNamespace("tidyverse", quietly = TRUE)) {
  install.packages("tidyverse")
}
if (!requireNamespace("ggdist", quietly = TRUE)) {
  install.packages("ggdist")
}
if (!requireNamespace("ggpmisc", quietly = TRUE)) {
  install.packages("ggpmisc")
}

suppressPackageStartupMessages(library(tidyverse))

# Set ggplot theme
theme_ns <- theme(text = element_text(family = "Helvetica"),
                  title = element_text(size = 14, margin = margin(0, 0, 8, 0)),
                  plot.subtitle = element_text(size = 12, face = "plain", hjust = 0),
                  plot.title = element_text(hjust = 0),
                  axis.title = element_text(size = 12, face = "bold", margin = margin(4,4,4,4)),
                  axis.title.x.bottom = element_text(face = "bold", margin = margin(4,0,0,0)),
                  axis.title.y.left = element_text(face = "bold", margin = margin(0,4,0,0)),
                  legend.title = element_text(face = "bold.italic", size = 12),
                  axis.line = element_line(),
                  axis.ticks = element_blank(),
                  panel.grid = element_blank(), 
                  panel.background = element_blank(),
                  strip.text = element_text(size = 10, face = "bold.italic"),
                  strip.background = element_blank())
theme_set(theme_ns)

# Download BMP data for analysis
bmp_data <- arrow::read_feather("https://figshare.com/ndownloader/files/45407398")

```

# Best Practices
## Comparing Distributions

Let's start by comparing the distributions of potassium results.

::: panel-tabset
### Base

::: columns
::: {.column width="60%"}
```{r}
#| fig.width: 8
#| fig.height: 6
#| warning: false

bmp_data |> 
  slice_head(n = 1000) |>
  ggplot(aes(y = potassium_plas, x = luo_h > 100)) + 
    geom_boxplot() + 
    scale_y_continuous(name = "Potassium (mmol/L)", limits = c(2, 8)) + 
    scale_x_discrete(name = "Hemolysis", limits = c(F, T), labels = c("H-Index < 100", "H-Index >= 100")) +
    theme(axis.title.x.bottom = element_blank())

```
:::

::: {.column width="5%"}
:::

::: {.column width="35%"}
Explanation here
:::
:::

### Good

::: columns
::: {.column width="60%"}
```{r}
#| fig.width: 8
#| fig.height: 6
#| warning: false

bmp_data |> 
  slice_head(n = 1000) |>
  ggplot(aes(x = potassium_plas, y = luo_h > 100)) + 
    geom_boxplot() +
    geom_text(data = tibble(x = c(4.1, 4.7), y = c(1.45, 2.45), label = c("H-Index < 100", "H-Index >= 100")), aes(x = x, y = y, label = label)) + 
    scale_x_continuous(name = "Potassium (mmol/L)", limits = c(2, 8)) + 
    scale_y_discrete(name = "Hemolysis", limits = c(F, T), labels = c("H-Index < 100", "H-Index >= 100")) +
    theme(axis.title.x.bottom = element_blank())

```
:::

::: {.column width="5%"}
:::

::: {.column width="35%"}
Explanation here
:::
:::

### Better
::: columns
::: {.column width="60%"}
```{r}
#| fig.width: 8
#| fig.height: 6
#| warning: false

bmp_data |> 
  slice_head(n = 1000) |>
  ggplot(aes(x = potassium_plas, y = luo_h > 100)) + 
    ggdist::stat_halfeye(trim = F) + 
    geom_text(data = tibble(x = c(4.1, 4.7), y = c(1.15, 2.15), label = c("H-Index < 100", "H-Index >= 100")), aes(x = x, y = y, label = label)) + 
    scico::scale_fill_scico_d() + 
    scale_x_continuous(name = "Potassium (mmol/L)", limits = c(2, 8)) + 
    scale_y_discrete(name = "Hemolysis", limits = c(F, T), labels = c("H-Index < 100", "H-Index >= 100")) +
    theme(axis.title.x.bottom = element_blank())

```
:::

::: {.column width="5%"}
:::

::: {.column width="35%"}
Explanation here
:::
:::

### Best
::: columns
::: {.column width="60%"}
```{r}
#| fig.width: 8
#| fig.height: 6
#| warning: false

bmp_data |> 
  slice_head(n = 1000) |>
  ggplot(aes(y = potassium_plas, x = luo_h)) + 
    geom_point(alpha = 0.5, size = 2, stroke = 0.1) + 
    ggpmisc::stat_poly_eq() + 
    scale_y_continuous(name = "Potassium (mmol/L)", limits = c(2, 8)) + 
    scale_x_continuous(name = "Hemolysis Index") +
    coord_cartesian(xlim = c(0, 100)) +
    theme()

```
:::

::: {.column width="5%"}
:::

::: {.column width="35%"}
Explanation here
:::
:::
:::

## Comparing Proportions

Next, let's explore how we might best display proportions.

::: panel-tabset
### Base
::: columns
::: {.column width="60%"}
```{r}
#| fig.width: 8
#| fig.height: 6
#| warning: false

toy_hil_data <- 
  tibble(Location = c("ED", "ICU", "OP"), Hemolysis = c(0.8, 0.5, 0.6), Icterus = c(0.1, 0.1, 0.2), Lipemia = c(0.1, 0.4, 0.2)) |> 
    pivot_longer(-Location, names_to = "Error", values_to = "Proportion") |> 
    mutate(Error = factor(Error, levels = c("Lipemia", "Icterus", "Hemolysis")), Location = factor(Location, levels = c("ICU", "OP", "ED")))

# Make baseline pie chart
toy_hil_data |> 
  ggplot(aes(x = "", y = Proportion, fill = Error, alpha = Location)) + 
    geom_bar(width = 1, stat = "identity") + 
    scale_fill_manual(values = c("blue", "green", "red")) + 
    scale_alpha_manual(values = c(1, 0.8, 0.6)) +
    coord_polar("y", start = 0) +
    ggtitle("Proportion of HIL Errors by Location") +
    theme_void() + 
    theme(plot.title = element_text(size = 24, face = "bold.italic", hjust = 0))

```
:::

::: {.column width="5%"}
:::

::: {.column width="35%"}
Explanation here
:::
:::

### Good
::: columns
::: {.column width="60%"}
```{r}
#| fig.width: 8
#| fig.height: 6
#| warning: false

toy_hil_data |> 
  ggplot(aes(x = Proportion, y = Location, fill = Error)) + 
    geom_col(alpha = 0.8) + 
    scale_fill_manual(values = c("blue", "green", "red")) + 
    scale_alpha_manual(values = c(1, 0.8, 0.6)) +
    ggtitle("Proportion of HIL Errors by Location") +
    theme(plot.title = element_text(size = 24, face = "bold.italic", hjust = 0))

```
:::

::: {.column width="5%"}
:::

::: {.column width="35%"}
Explanation here
:::
:::

### Better
::: columns
::: {.column width="60%"}
```{r}
#| fig.width: 8
#| fig.height: 6
#| warning: false

toy_hil_data |> 
  mutate(label = glue::glue("*{str_sub(Error, 1, 1)}*<br>**{Proportion}**")) |>
  ggplot(aes(x = Proportion, y = Location, fill = Error)) + 
    geom_col(alpha = 0.9) + 
    ggtext::geom_richtext(aes(label = label), position = position_stack(vjust = 0.5), size = 8, fill = NA, label.color = NA) +
    scico::scale_fill_scico_d(palette = "bilbao", begin = 0.9, end = 0.1) + 
    scale_alpha_manual(values = c(1, 0.8, 0.6)) +
    scale_x_continuous(labels = c("0", "0.5", "1"), breaks = c(0, 0.5, 1), expand = expansion(mult = c(0, 0.01))) + 
    scale_y_discrete(expand = expansion(mult = c(0.1, 0.1))) +
    ggtitle("Proportion of HIL Errors by Location") +
    theme(plot.title = element_text(size = 24, face = "bold.italic", hjust = 0), legend.position = "none", axis.title.y.left = element_blank(), axis.text.y.left = element_text(size = 24, face = "bold", color = "black"), axis.text.x.bottom = element_text(size = 16, face = "bold", color = "black"), axis.title.x.bottom = element_blank())

```
:::

::: {.column width="5%"}
:::

::: {.column width="35%"}
Explanation here
:::
:::

### Best
::: columns
::: {.column width="60%"}
```{r}
#| fig.width: 8
#| fig.height: 6
#| warning: false

toy_hil_data |> 
  mutate(label = glue::glue("*{str_sub(Error, 1, 1)}*<br>**{Proportion}**")) |>
  ggplot(aes(x = Proportion, y = Location, fill = Error)) + 
    geom_col(alpha = 0.9) + 
    ggtext::geom_richtext(aes(label = Proportion), nudge_x = 0.01, hjust = 0, size = 8, fill = NA, label.color = NA) +
    facet_wrap(~fct_rev(Error), ncol = 3) +
    scico::scale_fill_scico_d(palette = "bilbao", begin = 0.9, end = 0.1) + 
    scale_alpha_manual(values = c(1, 0.8, 0.6)) +
    scale_x_continuous(limits = c(0, 1), labels = c("0", "0.5", "1"), breaks = c(0, 0.5, 1), expand = expansion(mult = c(0, 0.05))) + 
    scale_y_discrete(expand = expansion(mult = c(0.1, 0.1))) +
    coord_cartesian(clip = "off") +
    ggtitle("Proportion of HIL Errors by Location") +
    theme(plot.title = element_text(size = 24, face = "bold.italic", hjust = 0), legend.position = "none", axis.title.y.left = element_blank(), axis.text.y.left = element_text(size = 24, face = "bold", color = "black"), axis.text.x.bottom = element_text(size = 16, face = "bold", color = "black"), axis.title.x.bottom = element_blank(), strip.text = element_text(size = 24, face = "italic", color = "black"), strip.clip = "off", panel.spacing.x = unit(2, "lines"))

```
:::

::: {.column width="5%"}
:::

::: {.column width="35%"}
Explanation here
:::
:::
:::

# Geospatial Analysis
## Example 1: Map Types

## Example 2: Choosing an Appropriate Scale

## Example 3: Colors, Legends, and Labels

# Dashboards
## Example 1: XXX

::: columns
::: {.column width="60%"}
![](images/PowerBI_example.png)
:::

::: {.column width="5%"}
:::

::: {.column width="35%"}
Question Here
:::
:::

## Example 2: XXX

::: columns
::: {.column width="60%"}
![](images/ShinyFlexdashboard_example.png)
:::

::: {.column width="5%"}
:::

::: {.column width="35%"}
Question Here
:::
:::
